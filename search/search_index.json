{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Integra\u00e7\u00e3o Google Sheets + Power BI com Google Apps Script","text":"<p>Este projeto permite a integra\u00e7\u00e3o de dados do Google Sheets com Power BI por meio de um endpoint personalizado criado com Google Apps Script. O objetivo \u00e9 expor dados em formato JSON, facilitando a conex\u00e3o segura e perform\u00e1tica com ferramentas de BI.</p>"},{"location":"#workflow","title":"\ud83d\uddc2\ufe0f Workflow","text":"<p>Abaixo, a representa\u00e7\u00e3o do fluxo de integra\u00e7\u00e3o entre o Google Sheets, Google Apps Script e Power BI:</p> <p></p> <ul> <li>Atualiza\u00e7\u00e3o di\u00e1ria com trigger \u00e0s 5h.</li> <li>Transforma\u00e7\u00e3o dos dados no script.</li> <li>Carregamento via JSON no Power BI.</li> </ul>"},{"location":"codigo/","title":"\ud83d\udcc4 C\u00f3digo","text":"<pre><code>function doGet(e) {\n  var ss = SpreadsheetApp.openById(\n    \"\"\n  );\n  var sheet = ss.getSheetByName(\"BASE\");\n  var data = sheet.getDataRange().getValues();\n\n  var headers = data[0];\n  var jsonData = data.slice(1).map(function (row) {\n    var obj = {};\n    headers.forEach(function (header, i) {\n      var value = row[i];\n      if (i &gt;= 3) {\n        value = String(value).replace(/-/g, \"\");\n      }\n      obj[header] = value;\n    });\n    return obj;\n  });\n\n  return ContentService.createTextOutput(JSON.stringify(jsonData)).setMimeType(\n    ContentService.MimeType.JSON\n  );\n}\n</code></pre>"},{"location":"codigo/#explicacao-do-codigo","title":"\u2699\ufe0f Explica\u00e7\u00e3o do C\u00f3digo","text":"<ul> <li><code>doGet(e)</code>: Fun\u00e7\u00e3o executada em requisi\u00e7\u00f5es GET.</li> <li><code>SpreadsheetApp.openById(...)</code>: Acessa a planilha pelo ID.</li> <li><code>getSheetByName(\"BASE\")</code>: Seleciona a aba <code>BASE</code>.</li> <li><code>getDataRange().getValues()</code>: L\u00ea todos os dados da aba.</li> <li>Transforma os dados em JSON:</li> <li>Cabe\u00e7alhos da primeira linha.</li> <li>Linhas convertidas em objetos JS.</li> <li>Colunas a partir da 4\u00aa t\u00eam <code>-</code> removidos.</li> </ul>"},{"location":"codigo/#vantagens-do-metodo","title":"\u2705 Vantagens do M\u00e9todo","text":"Conex\u00e3o Direta (URL) Via Apps Script (JSON) Requer planilha p\u00fablica (risco de seguran\u00e7a) Acesso controlado, mais seguro Dados brutos, sem tratamento JSON limpo, campos tratados Problemas de desempenho Mais r\u00e1pido e est\u00e1vel para grandes volumes Pouca flexibilidade L\u00f3gica personalizada via script"},{"location":"conclusao/","title":"\ud83d\udccc Conclus\u00e3o","text":"<p>Essa abordagem com Google Apps Script oferece:</p> <ul> <li>Seguran\u00e7a: N\u00e3o precisa deixar a planilha p\u00fablica.</li> <li>Performance: Resposta mais r\u00e1pida em grandes volumes.</li> <li>Flexibilidade: Possibilidade de tratar e filtrar dados no pr\u00f3prio script.</li> </ul> <p>Uma solu\u00e7\u00e3o pr\u00e1tica e escal\u00e1vel para quem usa Power BI com dados do Google Sheets.</p>"},{"location":"padronizacao/","title":"\ud83e\uddf9 Padroniza\u00e7\u00e3o de Nomes na Planilha Google Sheets","text":"<p>Este script em Google Apps Script tem como objetivo padronizar os nomes das unidades hospitalares presentes neste relat\u00f3rio, alinhando-os com a base central de dados. Dessa forma, obtemos maior unifica\u00e7\u00e3o e consist\u00eancia das informa\u00e7\u00f5es, facilitando a an\u00e1lise e a gest\u00e3o dos dados.</p>"},{"location":"padronizacao/#como-funciona","title":"Como funciona","text":"<ol> <li>Base de nomes (Coluna A): Lista de nomes padronizados.</li> <li>Nomes a padronizar (Coluna B): Lista com nomes que podem estar despadronizados.</li> <li>Sa\u00edda (Coluna C): Nome padronizado correspondente mais pr\u00f3ximo encontrado na base.</li> <li>O script utiliza:</li> <li>Normaliza\u00e7\u00e3o de textos (remo\u00e7\u00e3o de acentos, mai\u00fasculas, substitui\u00e7\u00f5es comuns).</li> <li>Algoritmo de dist\u00e2ncia de Levenshtein para encontrar o nome mais parecido.</li> <li>Retorna \"N\u00c3O ENCONTRADO\" caso a similaridade seja muito baixa.</li> </ol>"},{"location":"padronizacao/#codigo-do-script","title":"C\u00f3digo do Script","text":"<pre><code>function padronizarNomes() {\n  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"P\u00e1gina5\");\n  const baseRange = sheet.getRange(\"A2:A\" + sheet.getLastRow());\n  const producaoRange = sheet.getRange(\"B2:B\" + sheet.getLastRow());\n  const outputRange = sheet.getRange(\"C2:C\" + sheet.getLastRow());\n\n  const baseValues = baseRange.getValues().flat().filter(String);\n  const producaoValues = producaoRange.getValues().flat();\n\n  function normalizar(nome) {\n    if (!nome) return \"\";\n    nome = nome.toString().toUpperCase();\n    nome = nome.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n    nome = nome.replace(/HOSP MUN/g, \"HOSPITAL MUNICIPAL\")\n               .replace(/H MUN/g, \"HOSPITAL MUNICIPAL\")\n               .replace(/MATERN/g, \"MATERNIDADE\")\n               .replace(/UPA 24H/g, \"UPA\")\n               .replace(/CER - /g, \"CER \")\n               .replace(/N S/g, \"NOSSA SENHORA\")\n               .replace(/ AP/g, \"\")\n               .replace(/-/g, \"\")\n               .replace(/SMS /g, \"\")\n               .replace(/S TELLES/g, \"SILVA TELLES\")\n               .replace(/ B DE /g, \" BUARQUE DE \");\n    return nome.trim();\n  }\n\n  function levenshtein(a, b) {\n    if (a.length === 0) return b.length;\n    if (b.length === 0) return a.length;\n\n    const matrix = [];\n\n    for (let i = 0; i &lt;= b.length; i++) {\n      matrix[i] = [i];\n    }\n    for (let j = 0; j &lt;= a.length; j++) {\n      matrix[0][j] = j;\n    }\n\n    for (let i = 1; i &lt;= b.length; i++) {\n      for (let j = 1; j &lt;= a.length; j++) {\n        if (b.charAt(i - 1) === a.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(\n            matrix[i - 1][j - 1] + 1,\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          );\n        }\n      }\n    }\n\n    return matrix[b.length][a.length];\n  }\n\n  const baseNormalizada = baseValues.map(normalizar);\n\n  function encontrarCorrespondente(nome) {\n    const nomeNorm = normalizar(nome);\n    if (!nomeNorm) return \"N\u00c3O ENCONTRADO\";\n\n    let melhorIndice = -1;\n    let melhorDistancia = Infinity;\n\n    for (let i = 0; i &lt; baseNormalizada.length; i++) {\n      const dist = levenshtein(nomeNorm, baseNormalizada[i]);\n      if (dist &lt; melhorDistancia) {\n        melhorDistancia = dist;\n        melhorIndice = i;\n      }\n    }\n\n    if (melhorDistancia &lt;= 8) {\n      return baseValues[melhorIndice];\n    } else {\n      return \"N\u00c3O ENCONTRADO\";\n    }\n  }\n\n  const resultados = producaoValues.map(encontrarCorrespondente);\n\n  outputRange.setValues(resultados.map(r =&gt; [r]));\n}\n</code></pre>"},{"location":"power_query/","title":"Tratamento PBI","text":""},{"location":"power_query/#contexto","title":"\ud83d\udce5 Contexto","text":"<p>Ap\u00f3s a padroniza\u00e7\u00e3o do JSON, \u00e9 necess\u00e1rio atualizar o Power BI para reconhecer as novas colunas adicionadas na fonte de dados (API Web via Apps Script).</p> <p>Para isso, foi preciso modificar o c\u00f3digo Power Query, incluindo explicitamente essas novas colunas no processo de expans\u00e3o dos dados. Sem essa atualiza\u00e7\u00e3o, as colunas rec\u00e9m-adicionadas n\u00e3o seriam carregadas no Power BI.</p>"},{"location":"power_query/#passos-realizados","title":"Passos realizados","text":"<ol> <li>Atualiza\u00e7\u00e3o da expans\u00e3o das colunas no Power Query</li> </ol> <p>No passo onde se expande os registros da coluna <code>\"Column1\"</code>, foi necess\u00e1rio incluir as novas colunas <code>\"UNIDADE_PADRONIZADA\"</code> e <code>\"SIGLA_UNIDADE\"</code>. O c\u00f3digo atualizado fica assim:</p> <pre><code>= Table.ExpandRecordColumn(\n    #\"Convertido para Tabela\", \"Column1\",\n    {\n      \"COMPET\u00caNCIA\",\n      \"CNES\",\n      \"UNIDADE\",\n      \"VALOR APROVADO_SIA\",\n      \"QUANTIDADE APROVADA_SIA\",\n      \"QUANTIDADE APRESENTADA_SIA\",\n      \"VALOR APRESENTADO_SIA\",\n      \"QUANTIDADE APRESENTADA_AIH\",\n      \"QUANTIDADE REJEITADA_AIH\",\n      \"VALOR TOTAL_AIH\",\n      \"UNIDADE_PADRONIZADA\",\n      \"SIGLA_UNIDADE\"\n    },\n    {\n      \"COMPET\u00caNCIA\",\n      \"CNES\",\n      \"UNIDADE\",\n      \"VALOR APROVADO_SIA\",\n      \"QUANTIDADE APROVADA_SIA\",\n      \"QUANTIDADE APRESENTADA_SIA\",\n      \"VALOR APRESENTADO_SIA\",\n      \"QUANTIDADE APRESENTADA_AIH\",\n      \"QUANTIDADE REJEITADA_AIH\",\n      \"VALOR TOTAL_AIH\",\n      \"UNIDADE_PADRONIZADA\",\n      \"SIGLA_UNIDADE\"\n    }\n)\n</code></pre> <ol> <li>Tratamento dos tipos de dados</li> </ol> <p>Ap\u00f3s expandir as colunas, \u00e9 fundamental ajustar os tipos das colunas para evitar erros e garantir a correta manipula\u00e7\u00e3o dos dados. A etapa de transforma\u00e7\u00e3o de tipos ficou assim:</p> <pre><code>= Table.TransformColumnTypes(\n    #\"Tipo Alterado1\",\n    {\n      {\"COMPET\u00caNCIA\", type datetime},\n      {\"CNES\", Int64.Type},\n      {\"UNIDADE\", type text},\n      {\"VALOR APROVADO_SIA\", type number},\n      {\"QUANTIDADE APROVADA_SIA\", Int64.Type},\n      {\"QUANTIDADE APRESENTADA_SIA\", Int64.Type},\n      {\"VALOR APRESENTADO_SIA\", type number},\n      {\"VALOR TOTAL_AIH\", type number},\n      {\"UNIDADE_PADRONIZADA\", type text},\n      {\"SIGLA_UNIDADE\", type text},\n      {\"QUANTIDADE APRESENTADA_AIH\", Int64.Type},\n      {\"QUANTIDADE REJEITADA_AIH\", Int64.Type}\n    }\n)\n</code></pre> <p>Importante: Se ocorrer erro ao converter as colunas <code>QUANTIDADE APRESENTADA_AIH</code> ou <code>QUANTIDADE REJEITADA_AIH</code> para inteiro, verificar se existem valores vazios ou n\u00e3o num\u00e9ricos, que precisam ser tratados antes da convers\u00e3o.</p> <p>Assim, o Power BI reconhecer\u00e1 as novas colunas e os dados estar\u00e3o formatados corretamente para an\u00e1lise.</p>"},{"location":"powerbi/","title":"\ud83d\udcc8 M\u00e9tricas Power BI","text":""},{"location":"powerbi/#aprovados-aih","title":"% Aprovados AIH","text":"<p>Calcula a porcentagem de autoriza\u00e7\u00f5es apresentadas no sistema AIH que foram aprovadas, considerando que a quantidade rejeitada \u00e9 subtra\u00edda do total apresentado.</p> <pre><code>% Aprovados AIH =\nDIVIDE(\n    SUM(exec[QUANTIDADE APRESENTADA_AIH]) - SUM(exec[QUANTIDADE REJEITADA_AIH]),\n    SUM(exec[QUANTIDADE APRESENTADA_AIH]),\n    0\n)\n</code></pre> <ul> <li>Numerador: Quantidade apresentada menos a quantidade rejeitada (autorizadas aprovadas)</li> <li>Denominador: Quantidade apresentada</li> <li>Retorna 0 em caso de divis\u00e3o por zero</li> </ul>"},{"location":"powerbi/#aprovados-sia","title":"% Aprovados SIA","text":"<p>Calcula a porcentagem de autoriza\u00e7\u00f5es aprovadas no sistema SIA em rela\u00e7\u00e3o \u00e0 quantidade apresentada.</p> <pre><code>% Aprovados SIA =\nDIVIDE(\n    SUM(exec[QUANTIDADE APROVADA_SIA]),\n    SUM(exec[QUANTIDADE APRESENTADA_SIA]),\n    0\n)\n</code></pre> <ul> <li>Numerador: Quantidade aprovada</li> <li>Denominador: Quantidade apresentada</li> <li>Retorna 0 em caso de divis\u00e3o por zero</li> </ul>"},{"location":"powerbi/#glosa-aih","title":"% Glosa AIH","text":"<p>Calcula a porcentagem de autoriza\u00e7\u00f5es rejeitadas (glosas) no sistema AIH em rela\u00e7\u00e3o \u00e0 quantidade apresentada.</p> <pre><code>% Glosa AIH =\nDIVIDE(\n    SUM(exec[QUANTIDADE REJEITADA_AIH]),\n    SUM(exec[QUANTIDADE APRESENTADA_AIH]),\n    0\n)\n</code></pre> <ul> <li>Numerador: Quantidade rejeitada</li> <li>Denominador: Quantidade apresentada</li> <li>Retorna 0 em caso de divis\u00e3o por zero</li> </ul>"},{"location":"powerbi/#glosa-sia","title":"% Glosa SIA","text":"<p>Calcula a porcentagem de autoriza\u00e7\u00f5es rejeitadas (glosas) no sistema SIA em rela\u00e7\u00e3o \u00e0 quantidade apresentada.</p> <pre><code>% Glosa SIA =\nDIVIDE(\n    SUM(exec[QUANTIDADE APRESENTADA_SIA]) - SUM(exec[QUANTIDADE APROVADA_SIA]),\n    SUM(exec[QUANTIDADE APRESENTADA_SIA]),\n    0\n)\n</code></pre> <ul> <li>Numerador: Quantidade apresentada menos quantidade aprovada (quantidade rejeitada)</li> <li>Denominador: Quantidade apresentada</li> <li>Retorna 0 em caso de divis\u00e3o por zero</li> </ul>"},{"location":"powerbi/#observacoes-gerais","title":"Observa\u00e7\u00f5es gerais","text":"<ul> <li>As medidas usam a fun\u00e7\u00e3o <code>DIVIDE</code> para evitar erros de divis\u00e3o por zero, retornando 0 nesses casos.</li> <li>Os dados s\u00e3o provenientes da tabela <code>exec</code> com colunas espec\u00edficas para cada sistema (AIH e SIA).</li> <li>Essas m\u00e9tricas s\u00e3o importantes para an\u00e1lise de efici\u00eancia e controle de rejei\u00e7\u00f5es nos processos de autoriza\u00e7\u00e3o.</li> </ul>"},{"location":"powerbi/#dimensao-datas-dim_data","title":"\ud83d\udcc5 Dimens\u00e3o Datas \u2013 <code>dim_data</code>","text":"<p>Essa medida foi criada para gerar uma tabela de datas com base na menor e maior compet\u00eancia dispon\u00edvel na tabela <code>exec</code>. A f\u00f3rmula usada foi:</p> <pre><code>dim_data = CALENDAR(MIN('exec'[COMPET\u00caNCIA]), MAX('exec'[COMPET\u00caNCIA]))\n</code></pre>"},{"location":"powerbi/#o-que-ela-faz","title":"O que ela faz?","text":"<p>Cria uma tabela chamada <code>dim_data</code> contendo todas as datas entre o menor e o maior valor encontrado na coluna <code>COMPET\u00caNCIA</code>. Essa coluna representa os per\u00edodos (mensais) das informa\u00e7\u00f5es analisadas.</p>"},{"location":"powerbi/#por-que-isso-e-importante","title":"Por que isso \u00e9 importante?","text":"<p>Ter uma tabela de datas completa \u00e9 essencial para trabalhar com an\u00e1lises temporais no Power BI. Com ela \u00e9 poss\u00edvel:</p> <ul> <li>Relacionar a tabela de datas com dados de produ\u00e7\u00e3o.</li> <li>Criar gr\u00e1ficos com filtros por ano, m\u00eas, trimestre etc.</li> </ul>"},{"location":"powerbi/#proximo-passo","title":"Pr\u00f3ximo passo","text":"<p>Depois de gerar essa tabela, adiciono colunas auxiliares como:</p> <ul> <li>Ano (<code>YEAR([Date])</code>)</li> <li>M\u00eas (<code>MONTH([Date])</code>)</li> <li>Nome do M\u00eas (<code>FORMAT([Date], \"MMMM\")</code>)</li> <li>Trimestre (<code>QUARTER([Date])</code>)</li> <li>Dia da Semana (<code>WEEKDAY([Date])</code>)</li> <li>M\u00eas Abreviado (<code>SWITCH(MONTH(dim_data[Date]),1, \"jan\", 2, \"fev\", ...</code>)</li> </ul>"},{"location":"powerbi/#como-usar-o-json-do-apps-scripts-no-power-bi","title":"\ud83d\udd17 Como usar o JSON do Apps Scripts no Power BI","text":"<p>Publique o script como Web App:</p> <ul> <li>V\u00e1 em Publicar &gt; Implantar como aplicativo da Web</li> <li>Escolha \"Qualquer pessoa\" como acesso</li> <li>Copie a URL gerada</li> </ul> <p>No Power BI:</p> <ul> <li>Clique em Obter Dados &gt; Web</li> <li>Cole a URL do Web App</li> <li>Selecione o formato JSON</li> <li>Importe e modele os dados</li> </ul> <p>Configura\u00e7\u00e3o do Power BI</p> <ul> <li>O arquivo est\u00e1 setado para atualizar todos os dias \u00e0s 6h da manh\u00e3</li> <li>Existe o modelo de dados e o arquivo base</li> <li>Est\u00e1 separado o arquivo base (criar m\u00e9tricas) e o relat\u00f3rio (consumir dados)</li> </ul>"}]}